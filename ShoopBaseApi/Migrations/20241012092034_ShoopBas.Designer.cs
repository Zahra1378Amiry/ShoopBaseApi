// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShoopBaseApi.Contxt;

#nullable disable

namespace ShoopBaseApi.Migrations
{
    [DbContext(typeof(ShoopBaseContxt))]
    [Migration("20241012092034_ShoopBas")]
    partial class ShoopBas
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.35")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ShoopBaseApi.Models.T_AboutUs", b =>
                {
                    b.Property<long>("ID_AboutUs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID_AboutUs"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID_AboutUs");

                    b.ToTable("T_AboutUs");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_Address", b =>
                {
                    b.Property<long>("ID_Address")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID_Address"), 1L, 1);

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Adrress")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CodePost")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("T_City_Id")
                        .HasColumnType("int");

                    b.Property<int>("T_Ostan_Id")
                        .HasColumnType("int");

                    b.Property<long>("T_User_Id")
                        .HasColumnType("bigint");

                    b.HasKey("ID_Address");

                    b.HasIndex("T_City_Id");

                    b.HasIndex("T_Ostan_Id");

                    b.HasIndex("T_User_Id");

                    b.ToTable("T_Address");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_Category", b =>
                {
                    b.Property<int>("ID_Category")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Category"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NameCategory")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ID_Category");

                    b.ToTable("T_Category");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_City", b =>
                {
                    b.Property<int>("ID_City")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_City"), 1L, 1);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("T_Ostan_Id")
                        .HasColumnType("int");

                    b.HasKey("ID_City");

                    b.HasIndex("T_Ostan_Id");

                    b.ToTable("T_City");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_Feedback", b =>
                {
                    b.Property<long>("ID_Feedback")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID_Feedback"), 1L, 1);

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("ID_Product_Id")
                        .HasColumnType("bigint");

                    b.Property<long>("ID_UserSingup_Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID_Feedback");

                    b.HasIndex("ID_Product_Id");

                    b.HasIndex("ID_UserSingup_Id");

                    b.ToTable("T_Feedback");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_Ganoon", b =>
                {
                    b.Property<long>("ID_Ganoon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID_Ganoon"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ID_Ganoon");

                    b.ToTable("T_Ganoon");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_ImagesProduct", b =>
                {
                    b.Property<long>("ID_Images")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID_Images"), 1L, 1);

                    b.Property<long>("T_Product_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID_Images");

                    b.HasIndex("T_Product_Id");

                    b.ToTable("T_ImagesProduct");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_LowOk", b =>
                {
                    b.Property<long>("ID_LowOk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID_LowOk"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IPUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("T_Ganoon_Id")
                        .HasColumnType("bigint");

                    b.Property<long>("T_User_Id")
                        .HasColumnType("bigint");

                    b.HasKey("ID_LowOk");

                    b.HasIndex("T_Ganoon_Id");

                    b.HasIndex("T_User_Id");

                    b.ToTable("T_LowOk");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_Offer", b =>
                {
                    b.Property<long>("ID_Offer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID_Offer"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ID_Prodect_Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("PriceOffer")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ID_Offer");

                    b.HasIndex("ID_Prodect_Id");

                    b.ToTable("T_Offer");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_Order", b =>
                {
                    b.Property<long>("ID_Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID_Order"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SendStatus")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("T_Address_Id")
                        .HasColumnType("bigint");

                    b.Property<long>("T_User_Id")
                        .HasColumnType("bigint");

                    b.HasKey("ID_Order");

                    b.HasIndex("T_Address_Id");

                    b.HasIndex("T_User_Id");

                    b.ToTable("T_Order");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_Ostan", b =>
                {
                    b.Property<int>("ID_Ostan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Ostan"), 1L, 1);

                    b.Property<string>("NameOstan")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ID_Ostan");

                    b.ToTable("T_Ostan");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_Payment", b =>
                {
                    b.Property<long>("ID_Payment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID_Payment"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("ID_User_Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("T_Order_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID_Payment");

                    b.HasIndex("ID_User_Id");

                    b.HasIndex("T_Order_Id");

                    b.ToTable("T_Payment");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_Product", b =>
                {
                    b.Property<long>("ID_Product")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID_Product"), 1L, 1);

                    b.Property<int?>("C_Product")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("ISActive")
                        .HasColumnType("bit");

                    b.Property<string>("NameProduct")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(18)
                        .HasColumnType("decimal(18,0)");

                    b.Property<int?>("T_Category_Id")
                        .HasColumnType("int");

                    b.HasKey("ID_Product");

                    b.HasIndex("T_Category_Id");

                    b.ToTable("T_Product");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_SearchHistory", b =>
                {
                    b.Property<long>("ID_Search")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID_Search"), 1L, 1);

                    b.Property<int?>("SearchCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("SearchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SearchQuery")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("T_User_Id")
                        .HasColumnType("bigint");

                    b.HasKey("ID_Search");

                    b.HasIndex("T_User_Id");

                    b.ToTable("T_SearchHistory");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_SendEmail", b =>
                {
                    b.Property<long>("ID_SendEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID_SendEmail"), 1L, 1);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAdrress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SentStatus")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("T_User_Id")
                        .HasColumnType("bigint");

                    b.HasKey("ID_SendEmail");

                    b.HasIndex("T_User_Id");

                    b.ToTable("T_SendEmail");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_ShoppingBasket", b =>
                {
                    b.Property<long>("ID_ItemShopping")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID_ItemShopping"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<long>("T_Product_Id")
                        .HasColumnType("bigint");

                    b.Property<long>("T_User_Id")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("TotalPrice")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasPrecision(29, 2)
                        .HasColumnType("decimal(29,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID_ItemShopping");

                    b.HasIndex("T_Product_Id");

                    b.HasIndex("T_User_Id");

                    b.ToTable("T_ShoppingBasket");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_TampOrder", b =>
                {
                    b.Property<long>("ID_TampOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID_TampOrder"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SendStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("T_Address_Id")
                        .HasColumnType("bigint");

                    b.Property<long>("T_Order_Id")
                        .HasColumnType("bigint");

                    b.Property<long>("T_User_Id")
                        .HasColumnType("bigint");

                    b.HasKey("ID_TampOrder");

                    b.HasIndex("T_Address_Id");

                    b.HasIndex("T_Order_Id");

                    b.HasIndex("T_User_Id");

                    b.ToTable("T_TampOrder");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_TampShoppingBasket", b =>
                {
                    b.Property<long>("ID_TampShoppingBasket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID_TampShoppingBasket"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IsActive")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<long>("T_Product_Id")
                        .HasColumnType("bigint");

                    b.Property<long>("T_ShoppingBasket_Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("T_TampOrder_Id")
                        .HasColumnType("bigint");

                    b.Property<long>("T_User_Id")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("TotalPrice")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasPrecision(29, 2)
                        .HasColumnType("decimal(29,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID_TampShoppingBasket");

                    b.HasIndex("T_Product_Id");

                    b.HasIndex("T_ShoppingBasket_Id");

                    b.HasIndex("T_TampOrder_Id");

                    b.HasIndex("T_User_Id");

                    b.ToTable("T_TampShoppingBasket");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_User", b =>
                {
                    b.Property<long>("ID_User")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID_User"), 1L, 1);

                    b.Property<string>("Emile")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FristName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("ISActive")
                        .HasColumnType("bit");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID_User");

                    b.ToTable("T_User");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_Address", b =>
                {
                    b.HasOne("ShoopBaseApi.Models.T_City", "T_City")
                        .WithMany("T_Address")
                        .HasForeignKey("T_City_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ShoopBaseApi.Models.T_Ostan", "T_Ostan")
                        .WithMany("T_Address")
                        .HasForeignKey("T_Ostan_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ShoopBaseApi.Models.T_User", "T_User")
                        .WithMany("T_Address")
                        .HasForeignKey("T_User_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("T_City");

                    b.Navigation("T_Ostan");

                    b.Navigation("T_User");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_City", b =>
                {
                    b.HasOne("ShoopBaseApi.Models.T_Ostan", "T_Ostan")
                        .WithMany("T_City")
                        .HasForeignKey("T_Ostan_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("T_Ostan");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_Feedback", b =>
                {
                    b.HasOne("ShoopBaseApi.Models.T_Product", "T_Product")
                        .WithMany("T_Feedback")
                        .HasForeignKey("ID_Product_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ShoopBaseApi.Models.T_User", "T_User")
                        .WithMany("T_Feedback")
                        .HasForeignKey("ID_UserSingup_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("T_Product");

                    b.Navigation("T_User");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_ImagesProduct", b =>
                {
                    b.HasOne("ShoopBaseApi.Models.T_Product", "T_Product")
                        .WithMany("T_ImagesProduct")
                        .HasForeignKey("T_Product_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("T_Product");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_LowOk", b =>
                {
                    b.HasOne("ShoopBaseApi.Models.T_Ganoon", "T_Ganoon")
                        .WithMany("T_LowOk")
                        .HasForeignKey("T_Ganoon_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ShoopBaseApi.Models.T_User", "T_User")
                        .WithMany("T_LowOk")
                        .HasForeignKey("T_User_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("T_Ganoon");

                    b.Navigation("T_User");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_Offer", b =>
                {
                    b.HasOne("ShoopBaseApi.Models.T_Product", "T_Product")
                        .WithMany("T_Offer")
                        .HasForeignKey("ID_Prodect_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("T_Product");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_Order", b =>
                {
                    b.HasOne("ShoopBaseApi.Models.T_Address", "T_Address")
                        .WithMany("T_Order")
                        .HasForeignKey("T_Address_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ShoopBaseApi.Models.T_User", "T_User")
                        .WithMany("T_Order")
                        .HasForeignKey("T_User_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("T_Address");

                    b.Navigation("T_User");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_Payment", b =>
                {
                    b.HasOne("ShoopBaseApi.Models.T_User", "T_User")
                        .WithMany("T_Payment")
                        .HasForeignKey("ID_User_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ShoopBaseApi.Models.T_Order", "T_Order")
                        .WithMany("T_Payment")
                        .HasForeignKey("T_Order_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("T_Order");

                    b.Navigation("T_User");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_Product", b =>
                {
                    b.HasOne("ShoopBaseApi.Models.T_Category", "T_Category")
                        .WithMany("T_Product")
                        .HasForeignKey("T_Category_Id");

                    b.Navigation("T_Category");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_SearchHistory", b =>
                {
                    b.HasOne("ShoopBaseApi.Models.T_User", "T_User")
                        .WithMany("T_SearchHistory")
                        .HasForeignKey("T_User_Id");

                    b.Navigation("T_User");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_SendEmail", b =>
                {
                    b.HasOne("ShoopBaseApi.Models.T_User", "T_User")
                        .WithMany("T_SendEmail")
                        .HasForeignKey("T_User_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("T_User");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_ShoppingBasket", b =>
                {
                    b.HasOne("ShoopBaseApi.Models.T_Product", "T_Product")
                        .WithMany("T_ShoppingBasket")
                        .HasForeignKey("T_Product_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ShoopBaseApi.Models.T_User", "T_User")
                        .WithMany("T_ShoppingBasket")
                        .HasForeignKey("T_User_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("T_Product");

                    b.Navigation("T_User");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_TampOrder", b =>
                {
                    b.HasOne("ShoopBaseApi.Models.T_Address", "T_Address")
                        .WithMany("T_TampOrder")
                        .HasForeignKey("T_Address_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ShoopBaseApi.Models.T_Order", "T_Order")
                        .WithMany("T_TampOrder")
                        .HasForeignKey("T_Order_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ShoopBaseApi.Models.T_User", "T_User")
                        .WithMany("T_TampOrder")
                        .HasForeignKey("T_User_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("T_Address");

                    b.Navigation("T_Order");

                    b.Navigation("T_User");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_TampShoppingBasket", b =>
                {
                    b.HasOne("ShoopBaseApi.Models.T_Product", "T_Product")
                        .WithMany("T_TampShoppingBasket")
                        .HasForeignKey("T_Product_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ShoopBaseApi.Models.T_ShoppingBasket", "T_ShoppingBasket")
                        .WithMany("T_TampShoppingBasket")
                        .HasForeignKey("T_ShoppingBasket_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ShoopBaseApi.Models.T_TampOrder", "T_TampOrder")
                        .WithMany("T_TampShoppingBasket")
                        .HasForeignKey("T_TampOrder_Id");

                    b.HasOne("ShoopBaseApi.Models.T_User", "T_User")
                        .WithMany("T_TampShoppingBasket")
                        .HasForeignKey("T_User_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("T_Product");

                    b.Navigation("T_ShoppingBasket");

                    b.Navigation("T_TampOrder");

                    b.Navigation("T_User");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_Address", b =>
                {
                    b.Navigation("T_Order");

                    b.Navigation("T_TampOrder");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_Category", b =>
                {
                    b.Navigation("T_Product");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_City", b =>
                {
                    b.Navigation("T_Address");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_Ganoon", b =>
                {
                    b.Navigation("T_LowOk");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_Order", b =>
                {
                    b.Navigation("T_Payment");

                    b.Navigation("T_TampOrder");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_Ostan", b =>
                {
                    b.Navigation("T_Address");

                    b.Navigation("T_City");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_Product", b =>
                {
                    b.Navigation("T_Feedback");

                    b.Navigation("T_ImagesProduct");

                    b.Navigation("T_Offer");

                    b.Navigation("T_ShoppingBasket");

                    b.Navigation("T_TampShoppingBasket");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_ShoppingBasket", b =>
                {
                    b.Navigation("T_TampShoppingBasket");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_TampOrder", b =>
                {
                    b.Navigation("T_TampShoppingBasket");
                });

            modelBuilder.Entity("ShoopBaseApi.Models.T_User", b =>
                {
                    b.Navigation("T_Address");

                    b.Navigation("T_Feedback");

                    b.Navigation("T_LowOk");

                    b.Navigation("T_Order");

                    b.Navigation("T_Payment");

                    b.Navigation("T_SearchHistory");

                    b.Navigation("T_SendEmail");

                    b.Navigation("T_ShoppingBasket");

                    b.Navigation("T_TampOrder");

                    b.Navigation("T_TampShoppingBasket");
                });
#pragma warning restore 612, 618
        }
    }
}
